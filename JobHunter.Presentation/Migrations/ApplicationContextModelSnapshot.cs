// <auto-generated />
using System;
using JobHunter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobHunter.Presentation.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobHunter.Data.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<int>("Priority");

                    b.Property<int>("ShowCount");

                    b.Property<int>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "jobs-it"
                        },
                        new
                        {
                            Id = 2,
                            Name = "jobs-construction-architecture"
                        },
                        new
                        {
                            Id = 3,
                            Name = "jobs-accounting"
                        },
                        new
                        {
                            Id = 4,
                            Name = "jobs-administration"
                        },
                        new
                        {
                            Id = 5,
                            Name = "jobs-hotel-restaurant-tourism"
                        },
                        new
                        {
                            Id = 6,
                            Name = "jobs-design-art"
                        },
                        new
                        {
                            Id = 7,
                            Name = "jobs-publishing-media"
                        },
                        new
                        {
                            Id = 8,
                            Name = "jobs-beauty-sports"
                        },
                        new
                        {
                            Id = 9,
                            Name = "jobs-culture-music-showbiz"
                        },
                        new
                        {
                            Id = 10,
                            Name = "jobs-logistic-supply-chain"
                        },
                        new
                        {
                            Id = 11,
                            Name = "jobs-marketing-advertising-pr"
                        },
                        new
                        {
                            Id = 12,
                            Name = "jobs-healthcare"
                        },
                        new
                        {
                            Id = 13,
                            Name = "jobs-real-estate"
                        },
                        new
                        {
                            Id = 14,
                            Name = "jobs-education-scientific"
                        },
                        new
                        {
                            Id = 15,
                            Name = "jobs-security"
                        },
                        new
                        {
                            Id = 16,
                            Name = "jobs-sales"
                        },
                        new
                        {
                            Id = 17,
                            Name = "jobs-production-engineering"
                        },
                        new
                        {
                            Id = 18,
                            Name = "jobs-retail"
                        },
                        new
                        {
                            Id = 19,
                            Name = "jobs-office-secretarial"
                        },
                        new
                        {
                            Id = 20,
                            Name = "jobs-agriculture"
                        },
                        new
                        {
                            Id = 21,
                            Name = "jobs-insurance"
                        },
                        new
                        {
                            Id = 22,
                            Name = "jobs-customer-service"
                        },
                        new
                        {
                            Id = 23,
                            Name = "jobs-telecommunications"
                        },
                        new
                        {
                            Id = 24,
                            Name = "jobs-management-executive"
                        },
                        new
                        {
                            Id = 25,
                            Name = "jobs-auto-transport"
                        });
                });

            modelBuilder.Entity("JobHunter.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Warszawa"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Krakow"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Wroclaw"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "Poznan"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "Gdansk"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Name = "Lublin"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Name = "Gdynia"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 2,
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 2,
                            Name = "Saint Petersburg"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 2,
                            Name = "Novosibirsk"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 2,
                            Name = "Yekaterinburg"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 2,
                            Name = "Samara"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 2,
                            Name = "Chelyabinsk"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 2,
                            Name = "Rostov-on-Don"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 2,
                            Name = "Voronezh"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 3,
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 3,
                            Name = "Hamburg"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 3,
                            Name = "Munchen"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 3,
                            Name = "Koln"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 3,
                            Name = "Frankfurt"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 3,
                            Name = "Essen"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 3,
                            Name = "Dortmund"
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 3,
                            Name = "Dusseldorf"
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 3,
                            Name = "Bremen"
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 4,
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 4,
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 4,
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = 28,
                            CountryId = 4,
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = 29,
                            CountryId = 4,
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = 30,
                            CountryId = 4,
                            Name = "Poltava"
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 4,
                            Name = "Chernihiv"
                        });
                });

            modelBuilder.Entity("JobHunter.Data.Entities.CompanyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployerId");

                    b.Property<int>("Rate");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyRates");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Russian Federation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ukraine"
                        });
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int?>("CityId");

                    b.Property<string>("CompanyName");

                    b.Property<string>("Description");

                    b.Property<string>("LogoURL");

                    b.Property<int?>("OrganisationCredentialId");

                    b.Property<int?>("ResumeId");

                    b.Property<string>("Site");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Slovatskoho, 4",
                            CityId = 27,
                            CompanyName = "SoftServe",
                            Description = "IT-company"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Soborna, 102",
                            CityId = 27,
                            CompanyName = "Boro",
                            Description = "Sales-company"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Soborna, 255",
                            CityId = 27,
                            CompanyName = "Toro",
                            Description = "Sales-company"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Soborna, 177",
                            CityId = 27,
                            CompanyName = "Solo",
                            Description = "Sales-company"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Slovatskoho, 4",
                            CityId = 27,
                            CompanyName = "AB Games",
                            Description = "IT-company"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Slovatskoho, 4",
                            CityId = 26,
                            CompanyName = "Bodo",
                            Description = "Sales-company"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Sadova, 4",
                            CityId = 26,
                            CompanyName = "SoftServe",
                            Description = "IT-company"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 2,
                            CompanyName = "Ocean Galaxy Marine",
                            Description = "Factory"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 1,
                            CompanyName = "Get JOB LTD",
                            Description = "Factory"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 3,
                            CompanyName = "Get JOB LTD",
                            Description = "Factory"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 4,
                            CompanyName = "Get JOB LTD",
                            Description = "Factory"
                        },
                        new
                        {
                            Id = 12,
                            CityId = 23,
                            CompanyName = "NORIU DIRBTI Recruitment Agency",
                            Description = "Factory"
                        },
                        new
                        {
                            Id = 13,
                            CityId = 18,
                            CompanyName = "NORIU DIRBTI Recruitment Agency",
                            Description = "Factory"
                        });
                });

            modelBuilder.Entity("JobHunter.Data.Entities.FavoriteResume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<int>("EmployerId");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("ResumeId");

                    b.ToTable("FavoriteResumes");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Polish"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Russian"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ukrainian"
                        },
                        new
                        {
                            Id = 5,
                            Name = "German"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spanish"
                        });
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Messenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number");

                    b.Property<int>("ProfileId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Messengers");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.OperationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("LogDate");

                    b.Property<int>("Type");

                    b.Property<int>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.ToTable("OperationLogs");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.OrganisationCredentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("EmployerId");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId")
                        .IsUnique();

                    b.ToTable("OrganisationCredentials");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount");

                    b.Property<string>("Destination");

                    b.Property<int>("EmployerId");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMain");

                    b.Property<string>("Number");

                    b.Property<int>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("PhoneNumbersPayments");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MiddleName");

                    b.Property<string>("Name");

                    b.Property<string>("SurName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("ResumeId");

                    b.Property<int?>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AgreementSpam");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<int>("Name");

                    b.Property<string>("Photo");

                    b.Property<int>("ProfileId");

                    b.Property<string>("ResumeFile");

                    b.Property<string>("Video");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.ResumeCountry", b =>
                {
                    b.Property<int>("ResumeId");

                    b.Property<int>("CountryId");

                    b.HasKey("ResumeId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("ResumeCountry");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "HOT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VIP"
                        });
                });

            modelBuilder.Entity("JobHunter.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("EmployerId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("ProfileId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accomodation");

                    b.Property<bool>("AgreementSpam");

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("CityId");

                    b.Property<string>("Cost");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<string>("Description");

                    b.Property<int?>("EmployerId");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<DateTime>("ExpirationStatusDate");

                    b.Property<byte>("Gender");

                    b.Property<int?>("JobTypeId");

                    b.Property<int?>("LanguageId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Salary");

                    b.Property<string>("SalaryComment");

                    b.Property<int>("ViewCount");

                    b.Property<bool>("Visa");

                    b.Property<string>("WorkExperience");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Vacancies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with HTML5, Sass, angular7",
                            EmployerId = 1,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "FrontEnd developer",
                            Salary = 15000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 2,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with .NET, SQL",
                            EmployerId = 1,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = ".NET developer",
                            Salary = 16000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 3,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with HTML5, Sass, angular7",
                            EmployerId = 7,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "FrontEnd developer",
                            Salary = 15000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 4,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with .NET, SQL",
                            EmployerId = 7,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)0,
                            Name = ".NET developer",
                            Salary = 16000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 5,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with clients, gave them full info about products and support",
                            EmployerId = 2,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "New business manager",
                            Salary = 12000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 6,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with clients, gave them full info about products and support",
                            EmployerId = 2,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)2,
                            Name = "New business manager",
                            Salary = 12000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 7,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with clients, gave them full info about products and support",
                            EmployerId = 3,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "New business manager",
                            Salary = 12000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 8,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with clients, gave them full info about products and support",
                            EmployerId = 3,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)2,
                            Name = "New business manager",
                            Salary = 11000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 9,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with clients, gave them full info about products and support",
                            EmployerId = 4,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "New business manager",
                            Salary = 9000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 10,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with clients, gave them full info about products and support",
                            EmployerId = 4,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "New business manager",
                            Salary = 10000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 11,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "create modern apps with Unity 3D game engine",
                            EmployerId = 5,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Unity3D Game developer",
                            Salary = 12000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 12,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "create modern apps with Unity 3D game engine",
                            EmployerId = 5,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)2,
                            Name = "Unity3D Game developer",
                            Salary = 16000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 13,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rough laying blocks, brick Concreting of armopoyas, crossing points",
                            EmployerId = 9,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Masters",
                            Salary = 20000m,
                            ViewCount = 0,
                            Visa = true
                        },
                        new
                        {
                            Id = 14,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rough laying blocks, brick Concreting of armopoyas, crossing points",
                            EmployerId = 8,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Masters",
                            Salary = 15000m,
                            ViewCount = 0,
                            Visa = true
                        },
                        new
                        {
                            Id = 15,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rough laying blocks, brick Concreting of armopoyas, crossing points",
                            EmployerId = 8,
                            ExpirationDate = new DateTime(2019, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)2,
                            Name = "Masters",
                            Salary = 18000m,
                            ViewCount = 0,
                            Visa = true
                        },
                        new
                        {
                            Id = 16,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rough laying blocks, brick Concreting of armopoyas, crossing points",
                            EmployerId = 9,
                            ExpirationDate = new DateTime(2019, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)2,
                            Name = "Masters",
                            Salary = 17000m,
                            ViewCount = 0,
                            Visa = true
                        },
                        new
                        {
                            Id = 17,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rough laying blocks, brick Concreting of armopoyas, crossing points",
                            EmployerId = 9,
                            ExpirationDate = new DateTime(2019, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Masters",
                            Salary = 22000m,
                            ViewCount = 0,
                            Visa = true
                        },
                        new
                        {
                            Id = 18,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rough laying blocks, brick Concreting of armopoyas, crossing points",
                            EmployerId = 9,
                            ExpirationDate = new DateTime(2019, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Masters",
                            Salary = 24000m,
                            ViewCount = 0,
                            Visa = true
                        },
                        new
                        {
                            Id = 19,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rough laying blocks, brick Concreting of armopoyas, crossing points",
                            EmployerId = 9,
                            ExpirationDate = new DateTime(2019, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Masters",
                            Salary = 23000m,
                            ViewCount = 0,
                            Visa = true
                        },
                        new
                        {
                            Id = 20,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rough laying blocks, brick Concreting of armopoyas, crossing points",
                            EmployerId = 7,
                            ExpirationDate = new DateTime(2019, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Masters",
                            Salary = 19000m,
                            ViewCount = 0,
                            Visa = true
                        },
                        new
                        {
                            Id = 21,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rough laying blocks, brick Concreting of armopoyas, crossing points",
                            EmployerId = 7,
                            ExpirationDate = new DateTime(2019, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)2,
                            Name = "Masters",
                            Salary = 16000m,
                            ViewCount = 0,
                            Visa = true
                        },
                        new
                        {
                            Id = 22,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with clients, gave them full info about products and support",
                            EmployerId = 4,
                            ExpirationDate = new DateTime(2019, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "New business manager",
                            Salary = 13000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 23,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with clients, gave them full info about products and support",
                            EmployerId = 4,
                            ExpirationDate = new DateTime(2019, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)2,
                            Name = "New business manager",
                            Salary = 11000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 24,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with clients, gave them full info about products and support",
                            EmployerId = 4,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "New business manager",
                            Salary = 10000m,
                            ViewCount = 0,
                            Visa = false
                        },
                        new
                        {
                            Id = 25,
                            AgreementSpam = true,
                            CreationDate = new DateTime(2019, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "work with clients, gave them full info about products and support",
                            EmployerId = 2,
                            ExpirationDate = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationStatusDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "New business manager",
                            Salary = 8000m,
                            ViewCount = 0,
                            Visa = false
                        });
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyCommentRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Like");

                    b.Property<int>("Rate");

                    b.Property<int>("UserId");

                    b.Property<int?>("VacancyFeedbackId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyFeedbackId");

                    b.ToTable("VacancyCommentRates");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.Property<int?>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyComplaints");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descritpion");

                    b.Property<int?>("ParentVacancyFeedbackId");

                    b.Property<int?>("ParentVacancyFeedbacksd");

                    b.Property<string>("Screenshot");

                    b.Property<int>("UserId");

                    b.Property<int?>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("ParentVacancyFeedbackId");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyFeedbacks");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyStatus", b =>
                {
                    b.Property<int>("VacancyId");

                    b.Property<int>("StatusId");

                    b.HasKey("VacancyId", "StatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("VacancyStatus");

                    b.HasData(
                        new
                        {
                            VacancyId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 1,
                            StatusId = 2
                        },
                        new
                        {
                            VacancyId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 3,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 4,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 5,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 6,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 6,
                            StatusId = 2
                        },
                        new
                        {
                            VacancyId = 8,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 9,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 13,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 13,
                            StatusId = 2
                        },
                        new
                        {
                            VacancyId = 14,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 18,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 19,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 19,
                            StatusId = 2
                        },
                        new
                        {
                            VacancyId = 23,
                            StatusId = 1
                        },
                        new
                        {
                            VacancyId = 24,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1523d71c-e42e-40e2-b393-e90e27d38c6f",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2eb859b1-42e3-469c-a61b-5de945c86777",
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "e113e27c-e2ef-4c10-85bb-3b84f267d6a8",
                            Name = "worker",
                            NormalizedName = "WORKER"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "c1c0e493-25aa-4c49-974b-eb82507b0123",
                            Name = "employer",
                            NormalizedName = "EMPLOYER"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "bf303acf-5e7e-40a9-a79c-9e17ddf67c6e",
                            Name = "moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Auction", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Vacancy", "Vacancy")
                        .WithMany("Auctions")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.City", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.CompanyRate", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.User", "User")
                        .WithMany("CompanyRates")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Email", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Profile", "Profile")
                        .WithMany("Emails")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Employer", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.City", "City")
                        .WithMany("Employers")
                        .HasForeignKey("CityId");

                    b.HasOne("JobHunter.Data.Entities.Resume")
                        .WithMany("Employers")
                        .HasForeignKey("ResumeId");

                    b.HasOne("JobHunter.Data.Entities.User", "User")
                        .WithOne("Employer")
                        .HasForeignKey("JobHunter.Data.Entities.Employer", "UserId");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.FavoriteResume", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Employer", "Employer")
                        .WithMany("FavoriteResumes")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Resume", "Resume")
                        .WithMany("FavoriteResumes")
                        .HasForeignKey("ResumeId");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Messenger", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Profile", "Profile")
                        .WithMany("Messengers")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.OperationLog", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Vacancy", "Vacancy")
                        .WithMany("OperationLogs")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.OrganisationCredentials", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Employer", "Employer")
                        .WithOne("OrganisationCredentials")
                        .HasForeignKey("JobHunter.Data.Entities.OrganisationCredentials", "EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Payment", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Employer", "Employer")
                        .WithMany("Payments")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.PhoneNumber", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Profile", "Profile")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Profile", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("JobHunter.Data.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Response", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Resume", "Resume")
                        .WithMany("Responses")
                        .HasForeignKey("ResumeId");

                    b.HasOne("JobHunter.Data.Entities.Vacancy", "Vacancy")
                        .WithMany("Responses")
                        .HasForeignKey("VacancyId");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Resume", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Category", "Category")
                        .WithMany("Resumes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Profile", "Profile")
                        .WithMany("Resumes")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.ResumeCountry", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Country", "Country")
                        .WithMany("ResumeCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Resume", "Resume")
                        .WithMany("ResumeCountries")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Vacancy", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Category", "Category")
                        .WithMany("Vacancies")
                        .HasForeignKey("CategoryId");

                    b.HasOne("JobHunter.Data.Entities.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityId");

                    b.HasOne("JobHunter.Data.Entities.Currency", "Currency")
                        .WithMany("Vacancies")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("JobHunter.Data.Entities.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("JobHunter.Data.Entities.JobType", "JobType")
                        .WithMany("Vacancies")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("JobHunter.Data.Entities.Language", "Language")
                        .WithMany("Vacancies")
                        .HasForeignKey("LanguageId");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyCommentRate", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User", "User")
                        .WithMany("VacancyCommentRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.VacancyFeedback", "VacancyFeedback")
                        .WithMany("VacancyCommentRates")
                        .HasForeignKey("VacancyFeedbackId");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyComplaint", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User", "User")
                        .WithMany("VacancyComplaints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Vacancy", "Vacancy")
                        .WithMany("VacancyComplaints")
                        .HasForeignKey("VacancyId");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyFeedback", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.VacancyFeedback", "ParentVacancyFeedback")
                        .WithMany("VacancyFeedbacks")
                        .HasForeignKey("ParentVacancyFeedbackId");

                    b.HasOne("JobHunter.Data.Entities.User", "User")
                        .WithMany("VacancyFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Vacancy", "Vacancy")
                        .WithMany("VacancyFeedbacks")
                        .HasForeignKey("VacancyId");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyStatus", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Status", "Status")
                        .WithMany("VacancyStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Vacancy", "Vacancy")
                        .WithMany("VacancyStatuses")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
