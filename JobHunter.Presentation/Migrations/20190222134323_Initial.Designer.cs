// <auto-generated />
using System;
using JobHunter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobHunter.Presentation.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190222134323_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobHunter.Data.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<int>("Priority");

                    b.Property<int>("ShowCount");

                    b.Property<int>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.CompanyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployerId");

                    b.Property<int>("Rate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyRates");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "UK"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 5,
                            Name = "German"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Italy"
                        });
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int?>("CityId");

                    b.Property<string>("CompanyName");

                    b.Property<string>("Description");

                    b.Property<string>("LogoURL");

                    b.Property<int?>("OrganisationCredentialId");

                    b.Property<int?>("ResumeId");

                    b.Property<string>("Site");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ResumeId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.FavoriteResume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<int>("EmployerId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("ResumeId");

                    b.ToTable("FavoriteResumes");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Polish"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Russian"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ukrainian"
                        },
                        new
                        {
                            Id = 5,
                            Name = "German"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Spanish"
                        });
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Messenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number");

                    b.Property<int>("ProfileId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Messengers");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.OperationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("LogDate");

                    b.Property<int>("Type");

                    b.Property<int>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.ToTable("OperationLogs");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.OrganisationCredentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("EmployerId");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId")
                        .IsUnique();

                    b.ToTable("OrganisationCredentials");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount");

                    b.Property<string>("Destination");

                    b.Property<int>("EmployerId");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMain");

                    b.Property<string>("Number");

                    b.Property<int>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("PhoneNumbersPayments");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MiddleName");

                    b.Property<string>("Name");

                    b.Property<string>("SurName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("ResumeId");

                    b.Property<int?>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AgreementSpam");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<int>("Name");

                    b.Property<string>("Photo");

                    b.Property<int>("ProfileId");

                    b.Property<string>("ResumeFile");

                    b.Property<string>("Video");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.ResumeCountry", b =>
                {
                    b.Property<int>("ResumeId");

                    b.Property<int>("CountryId");

                    b.HasKey("ResumeId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("ResumeCountry");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "HOT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VIP"
                        });
                });

            modelBuilder.Entity("JobHunter.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("ProfileId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accomodation");

                    b.Property<bool>("AgreementSpam");

                    b.Property<int>("CategoryId");

                    b.Property<int>("CityId");

                    b.Property<string>("Cost");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description");

                    b.Property<int>("EmployerId");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<DateTime>("ExpirationStatusDate");

                    b.Property<byte>("Gender");

                    b.Property<int>("JobTypeId");

                    b.Property<int?>("LanguageId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Salary");

                    b.Property<string>("SalaryComment");

                    b.Property<int>("StatusId");

                    b.Property<int>("ViewCount");

                    b.Property<bool>("Visa");

                    b.Property<string>("WorkExperience");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StatusId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyCommentRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Like");

                    b.Property<int>("Rate");

                    b.Property<int>("UserId");

                    b.Property<int?>("VacancyFeedbackId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyFeedbackId");

                    b.ToTable("VacancyCommentRates");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.Property<int>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyComplaints");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descritpion");

                    b.Property<int?>("ParentVacancyFeedbackId");

                    b.Property<int?>("ParentVacancyFeedbacksd");

                    b.Property<string>("Screenshot");

                    b.Property<int>("UserId");

                    b.Property<int>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("ParentVacancyFeedbackId");

                    b.HasIndex("UserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyFeedbacks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Auction", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Vacancy", "Vacancy")
                        .WithMany("Auctions")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.City", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.CompanyRate", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.User", "User")
                        .WithMany("CompanyRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Email", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Profile", "Profile")
                        .WithMany("Emails")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Employer", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.City", "City")
                        .WithMany("Employers")
                        .HasForeignKey("CityId");

                    b.HasOne("JobHunter.Data.Entities.Resume")
                        .WithMany("Employers")
                        .HasForeignKey("ResumeId");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.FavoriteResume", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Employer", "Employer")
                        .WithMany("FavoriteResumes")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Resume", "Resume")
                        .WithMany("FavoriteResumes")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Messenger", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Profile", "Profile")
                        .WithMany("Messengers")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.OperationLog", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Vacancy", "Vacancy")
                        .WithMany("OperationLogs")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.OrganisationCredentials", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Employer", "Employer")
                        .WithOne("OrganisationCredentials")
                        .HasForeignKey("JobHunter.Data.Entities.OrganisationCredentials", "EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Payment", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Employer", "Employer")
                        .WithMany("Payments")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.PhoneNumber", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Profile", "Profile")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Profile", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("JobHunter.Data.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Response", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Resume", "Resume")
                        .WithMany("Responses")
                        .HasForeignKey("ResumeId");

                    b.HasOne("JobHunter.Data.Entities.Vacancy", "Vacancy")
                        .WithMany("Responses")
                        .HasForeignKey("VacancyId");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Resume", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Category", "Category")
                        .WithMany("Resumes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Profile", "Profile")
                        .WithMany("Resumes")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.ResumeCountry", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Country", "Country")
                        .WithMany("ResumeCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Resume", "Resume")
                        .WithMany("ResumeCountries")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.Vacancy", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.Category", "Category")
                        .WithMany("Vacancies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Currency", "Currency")
                        .WithMany("Vacancies")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.JobType", "JobType")
                        .WithMany("Vacancies")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Language", "Language")
                        .WithMany("Vacancies")
                        .HasForeignKey("LanguageId");

                    b.HasOne("JobHunter.Data.Entities.Status", "Status")
                        .WithMany("Vacancies")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyCommentRate", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User", "User")
                        .WithMany("VacancyCommentRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.VacancyFeedback", "VacancyFeedback")
                        .WithMany("VacancyCommentRates")
                        .HasForeignKey("VacancyFeedbackId");
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyComplaint", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User", "User")
                        .WithMany("VacancyComplaints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Vacancy", "Vacancy")
                        .WithMany("VacancyComplaints")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobHunter.Data.Entities.VacancyFeedback", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.VacancyFeedback", "ParentVacancyFeedback")
                        .WithMany("VacancyFeedbacks")
                        .HasForeignKey("ParentVacancyFeedbackId");

                    b.HasOne("JobHunter.Data.Entities.User", "User")
                        .WithMany("VacancyFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.Vacancy", "Vacancy")
                        .WithMany("VacancyFeedbacks")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobHunter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("JobHunter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
